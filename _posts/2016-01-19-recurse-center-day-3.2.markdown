---
published: true
title: Recurse Center, Day 3.2
layout: post
---
Yesterday was Martin Luther King Day and thus not an official RC day; for consistency’s sake, I’m still going to title this like a Tuesday.

I did come in yesterday: I had a few hours to kill between lunch with K. and seeing L.’s friend’s friend’s apartment. I told myself I would get as much as I could done on this stupid set of functions in my stupid two-dimensional Tetris implementation that detect whether a Tetris piece is adjacent to another piece (e.g., it’s fallen and hit the bottom). Conceptually this is of course really easy, but the thing is, I’m doing all of the logic BY HAND. Like, I’m traversing all of these arrays of arrays to print out “pixels” in the browser. Anyway, the point is, in just 2.5 hours, I managed to get my neighbor-detection functions entirely working!!! I was surprised and elated. I didn’t think I’d get it working! I thought all of that array traversal would be too slow! And yet it renders fine! Hooray!

Only when I came in this morning did I realize that there was a small but crucial bug. I spent most of today tracking it down and then fixing it. My code is increasingly poorly organized and an increasingly inconsistent mish-mash of object-oriented code with purely functional code coupled with various different and contradictory ways of storing the game's state. I’ve so far kept it from imploding, and if I can only do so for another ~200 lines I think I can get the game working.

I’m glad to be DOING SOMETHING. But, I mean, I don’t *really* care about Tetris; I’m not stretching myself or growing myself by writing it; I’m not taking advantage of the social resources of RC in writing it. (I probably *should* ask someone for advice on how to better organize it.) It feels like… carpentry. Like the intellectual equivalent of long-distance driving: not so boring that you fall asleep–it is WORK–but not so interesting that it’s challenging (and vice-versa). Like, I basically know how to do it, and although there have been some minor hurdles along the way, I’ve been able to figure them out fairly quickly. Like building something. Carpentry.

I’m leaving the day stuck on a problem that’s not too complicated to describe in a picture, but probably isn’t worth even ATTEMPTING to describe in words. Basically, my idea for this two-dimensional Tetris implementation is to have pieces flying in from any of four sides. In normal Tetris, you have pieces flying in (i.e., falling) from ONE side. And then the board “clears” by one row when you’ve aligned the pieces so that you’ve got a solid, filled-in row. Right? So my idea with this two-dimensional Tetris is that instead of trying to get a bunch of solid ROWS, you’re trying to create a bunch of solid BOXES, all aligned around the center. So as soon as you’ve filled in a square/rectangle around the centermost point, that square “clears,” and all the pieces on the board move inwards. If you see a picture, it’s basically the natural two-dimensional generalization.

But the PROBLEM is that, like, in the obvious way to do this, you need to sort of squeeze the board together. Does this make any sense? I doubt it does without a picture. But it’s really not that complicated. Anyway, that’d be fine if the Tetris board were a continuous surface, but it’s not: it’s discrete/pixellated. So how do you do this? I have no idea. And of course this isn’t a technical problem like, “I want to do specific thing X, but can’t figure out how to make it work.” This is a problem like, “I have a vague, inchoate notion of what I want to do, and am not quite sure how to formalize/articulate it.” Or rather, my attempt to formalize it has pointed out contradictions in my vague notions. That’s fine; I just need to… think of or choose a way to resolve it. Hopefully by tomorrow morning I’ll have come up with something. Maybe I’ll just write a formula that makes gross discontinuities at edges.

The problem is the same (more or less) as the problem that we have with maps: the Earth is a sphere, but we try to represent it on a flat sheet (a piece of paper). In order to do that we need to squeeze and distort certain parts. That’s why Greenland always looks the same size as Africa. But we can do this because we’re imagining the Earth as a CONTINUOUS shape. The difference with Tetris is that the Tetris board, by is discrete. How do you transform, e.g., a 10-pixel strip into a 6.394558 pixel strip without losing any information, and without making the game impossible to play?

I’m struggling because I don’t know how to continuously transform discrete quantities. (Even when I’m not doing Haskell I’m haunted by type errors. Even when I’m avoiding playing with applied topology, there it is!)

I explained the issue to A. and M., who happened to be nearby when I discovered it. They were just as lost for ideas as I was, but we did joke a bit about Tetris on weird shapes. Normal Tetris gets played on a flat plane: what if you played Tetris on a weirder shape?

L. was in town yesterday. We went on a long walk through Koreatown and past the UN and into the East 70s, where we discovered a bar called “Murphy’s Law.” The bartender had a thick Irish accent but looked Hispanic. He was playing Rage Against the Machine and he gave us free shots of Jameson (“for the road”) when we left.