---
published: true
title: Recurse Center, Day 3
layout: post
---
Maybe I should come up with a better scheme for the titles of these posts? I mean, they're ALL going to be about the Recurse Center. I really want to play around with the design a bit moreâ€“can I write my own template? (Or even just fork the code?) Incidentally, I wonder what the difference between "tags" and "categories" for posts are.

ANYWAY. Wednesday at the Recurse Center! A day full of errors and anxiety! What can I say that's good about today? Well, I did manage to solve several more of the 99 Problems in Haskell. although I sort of got hung up on one that required (as was suggested) a custom data type. 

And, to be fair, I was basically just cribbing my answers to the previous problems, which were helped substantially by our discussion at the seminar yesterday. But that's fine. The problems are supposed to be cumulative. More to the point, you don't have to understand language to use it, as Wittgenstein writes in the [Philosophical Investigations](https://en.wikipedia.org/wiki/Philosophical_Investigations). We come to understand language by *using* it. (By experience, rather than by theory.)

For that reason, I've been typing out all the examples in [Learn You a Haskell](http://learnyouahaskell.com) as I've been reading it. It's been really helpful! I've felt I've read it much better. I mean, this is a sort of "no shit!" observation, but one of the nice things about learning code (as opposed to math or physics) is that there's at least a mechanical tool that will tell you whether you're right or wrong. You can perturb the code a bit, and see if what results is what you expected, right away. You can't perturb a theorem from a textbook and be so quickly told whether it's true or false!

Still, what I did horrifically wrong today was that I worked on these problems all on my own. This is awful, since it means that the ratio of frustration to understanding is HUGE, and most of the frustration was POINTLESS frustration, of the sort that would be so much more quickly resolved by working with someone else, even if we were both beginners. Most of the time I was just staring sadly at all the type errors the compiler was giving me. (Maybe if I type in a colon right here, it'll start working?) Productive frustration is one thing: you run quickly down a path, and turn around as soon as you realize you've reached a dead end, and repeat. But I wasn't running anywhere. I was just staring sadly at the command line with no idea where to go. (Maybe I should use square brackets rather than parentheses?)

Anyway, I actually did learn some cool things today, and I really want to write about them, but I don't want to sweep my sins under the rug. There are like a dozen other people at RC learning Haskell! They're all awesome! They're all really friendly! They all want to help you! They all want you to help them! *So why the fuck didn't you make more of an effort to talk to them?!?* They're all talking to each other! Why didn't you join them??

This is one of the things I like the most about RC: the emphasis (in theory and in practice) on the SOCIAL dimension of learning technical things. All of my happiest memories from college math and science classes were of doing problem sets with my friends. I learned so much more so much more easily than in classes where I didn't have friends to do problem sets with. I'm pretty sure all of my professors told us that we should do problem sets with other people, but they also told us that we should ask questions in class, and of course no one ever volunteered any questions, and it never occurred to them that they should cold-call, or pause until someone asked a question, or otherwise try to set up a CULTURE of ASKING QUESTIONS in the classroom. Garrrh. You can't just teach students physics (e.g.); you need to teach them how to learn physics, and that includes a lot of stuff that has basically nothing directly to do with physics. 

Anyway, so today I worked in isolation, and it was awful, and it was a mistake to not seek out other people more actively, and of course I was aware of this mistake the entire time I was making it. Tomorrow I hope to not continue making that mistake. I also hope I can write more about Haskell, since I jotted down a bunch of notes that I had planned to include in this blog post, but it's just after midnight and I need to get up at seven and I've gotten dreadfully little sleep the last fortnight and am running a huge deficit. 

Two quick non-Haskell highlights: someone was talking today at the RC about trying to develop their own cryptography scheme that rather than using normal modular arithmetic, uses arithmetic on conic sections. Someone at the RC once wrote [a chat program that operates using ultrasonic sound](https://github.com/Katee/quietnet). Apparently most computer speakers and microphones can produce/hear sound at ultrasonic frequencies, and she managed to turn this into a viable data transfer protocol! Horrible bandwidth, but good enough for text-based chat between two computers! [It got featured on BoingBoing](http://boingboing.net/2014/01/11/quietnet-near-ultrasonic-mess.html). 

After RC, I went to K.'s apartment and had Luxembourgian wine that C. brought over from Trier. K.'s boss just got fired, but K. is pretty sure her position is secure, since she once bonded with the trust-funded owner of the company over their shared nostalgia for their Ivy League beer pong days.

Tomorrow: why Haskell doesn't want you to ask it which of its children it loves more!