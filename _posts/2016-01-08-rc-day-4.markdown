---
published: true
title: Recurse Center, Day 4
layout: post
---
Today was chiasmatic: I started it with the same anxiety and sadness from yesterday, and ended it with glory, compilation, and whiskey! 

I failed in a pretty awful respect: I didn't ask anyone for help with Haskell. And I suffered accordingly: the morning was miserable and unproductive. My code won't compile, and I don't understand Haskell, and that must be because I'm stupid, because I've been incompetent at everything else in life, and I'm clearly destined for failure, unlike everyone else I know, and unlike everyone else around me at RC, who are productive and interesting and getting lots of things done.

The nice Haskell guy with the giant beard walked past me. He was smiling off into space. I didn't ask him for help. (There's SURELY some line from the Bros. K. that I can quote here.)

Finally, after hours of fighting with the stupid type system, and failing to understand why my attempt at building a `NestedList` custom data type wasn't working, I clicked on the solution to that problem (#7 in [99 Problems](https://wiki.haskell.org/99_questions/1_to_10)). I didn't even read the whole problem: just the first two lines told me what I was doing wrong. When I'm defining functions that operate on custom data types, you need to be specific about how they'll use each potential part of your custom data type! This actually makes total sense. Hooray!

I was ecstatic about my discovery–if not about how I came to discover it (pointless lonely agony followed by looking at a solution)–and I decided to take a brief celebratory walk to get coffee. The idea being that it's better to take breaks NOT when you've run out of ideas–but exactly WHEN you know what to do next. This is Hemingway's writing advice, or maybe Faulkner's, or something. That way you avoid sitting back down to a blank page and not knowing what to do, and not having all of your relevant thoughts readily available.

I bought coffee. A block away from Dunkin' Donuts, a huge FDNY ladder truck was parked next to a building. The ladder was rotating down and re-telescoping. A crowd was gathered around. I saw the firefighters helping a disheveled-looking guy down. Had some homeless guy climbed up on top of the scaffolding? Why weren't there police or EMTs around? And why were they holding a fishing net? It looked like the disheveled guy was being allowed to just hop off the fire truck without being escorted. Then I saw what he was carrying: a hawk! The firefighters took down the FIRE LINE STAY BACK tape and the crowd pushed closer. Everyone was taking pictures. 

[So I guess what happened was](http://abcnews.go.com/US/firefighter-rescues-injured-red-tailed-hawk-nyc-building/story?id=36152023) that this red-tailed hawk had been lying on someone's A/C unit for the past three days, and they had called the fire department. The disheveled guy was an off-duty firefighter who, in his free time, runs a wildlife rehabilitation center with his wife. He was describing how he just barely managed to get the hawk: it had been frightened when he approached, and tried to hop off, and he just managed to pin it against the building before it fell. It had a swollen foot, and some crusted blood and indeterminate wounds on its chest. Maybe it had gotten into a fight with another hawk? Its eyes were darting around at all the people. But it seemed otherwise OK, and the guy cradling it posed for photos with the other firefighters.

I returned to the Recurse Center excited by the hawk, the coffee, and the imminent solution to the problem of flattening nested lists in Haskell.

Yet before I could get back to the ArchaeoBook to type it up, I went to grab my notebook from one of the conference rooms, and happened on a conversation between O. and A. O. was confused by some code he had written on a whiteboard. He had figured out that a certain part of it drew a circle, but he wasn't sure WHY it drew a circle. "I'm just jumping in and you probably already discussed this," I said, "but isn't that more or less the parameterized equations for a circle? Like, `y=sin(something)`, `x=cos(something)`, and then that other thing as the parameter?"

It turned out I was right. And it turned out that O. had been struggling by himself for several hours with the code. He's trying to learn WebGL, which is this amazing JavaScript API for graphics that directly uses your computer's graphics processing capabilities. There's usually like 20 layers of intermediaries between webpages and your CPU. That's no big deal for simple stuff like text, but if you're trying to render complex 3D graphics in a virtual machine running on a virtual machine running on another virtual machine, things get pretty slow. WebGL cuts out all the middlemen! Access the power of your GPU directly from the browser!

Anyway, O. has been trying to learn WebGL the last few days by looking at (AMAZING) sites like [GLS Sandbox](http://glslsandbox.com/), which is an interactive portfolio/demo of WebGL, with all these cool animations/graphics and their accompanying code. O. has been reading the code and trying to reverse-engineer it. If I change this part of the code, how does the animation change? If I change that part, what happens? I love this as a philosophy: perturbation as a method of understanding. If we poke the world in this way, what happens? what does that tell us about the structure of the world? Sometimes the way you want to poke the world requires spending billions and billions of dollars building a massive particle accelerator. That's hard. But in basic code like this, it's so much easier: there's zero cost! zero time! Just poke, and see what happens. 

By the time O. and I started talking, he was really just hung up on the mathy parts of this animation. I can't find it on GLSSandbox right now–the ArchaeoBook won't run WebGL, so I can't see it at all–but it was a pretty animation of ten circles rotating around each other. It looked almost like really simple, animated Islamic art. Compared to these actual CS people I'm a total doofus when it comes to math, but the math in this animation was just high school geometry. And so we had an exciting conversation or an hour as we tried to figure out how the code, and the math within, worked. A. joined us for parts of it, and had some really good insights. The whole thing felt like a problem session from college: just sitting around excitedly trying to figure out why something worked, or how something was true. The discharge of an intellectual capacitor, with people as the parallel plates. 

At one point I realized that one of the random constants that had been floating around–we all just assumed it was a meaningless scaling factor or something–sure seemed mighty familiar. `.62832`. Haven't I seen that inside trig functions before? It's not a radian, is it? No, a radian is like fifty seven-point-something degrees. Wait a second–`.28` is twice `.14`–`.62832` is `'pi/5`! OR, even more to the point, since there are TWO pi in every revolution of a circle, it's `2pi/10`. WHICH IS WHAT GIVES US THE TEN RINGS!!! I had my hypothesis in a flash. And then we tested it: what happens if we change `.628321` in the code to just `3.14159`? Sure enough: only two rings. 

Tonight at the RC the second-batch kids were doing (informal, self-organized, five-minute) presentations on stuff they've been working on or thinking about. Afterwards was game night. I wanted to go to both, despite my aversion to board games. The more socializing, the better! A stranger is just a friend you haven't met yet! But E. is in town this weekend (from Greece!), and so I had kimchi pancakes with him and M. in Manhattan Koreatown. He says he's probably going to spend a second year in Athens writing his dissertation. His research center there has a daily "ouzo hour," which helps.